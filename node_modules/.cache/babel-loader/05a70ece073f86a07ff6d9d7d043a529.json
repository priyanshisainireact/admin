{"ast":null,"code":"'use strict'; // Load modules\n\nvar _classCallCheck = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Any = require('../any');\n\nvar Ref = require('../../ref');\n\nvar Hoek = require('hoek'); // Declare internals\n\n\nvar internals = {\n  precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/\n};\n\ninternals.Number = /*#__PURE__*/function (_Any) {\n  _inherits(_class, _Any);\n\n  var _super = _createSuper(_class);\n\n  function _class() {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this);\n    _this._type = 'number';\n\n    _this._invalids.add(Infinity);\n\n    _this._invalids.add(-Infinity);\n\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"_base\",\n    value: function _base(value, state, options) {\n      var result = {\n        errors: null,\n        value: value\n      };\n\n      if (typeof value === 'string' && options.convert) {\n        var number = parseFloat(value);\n        result.value = isNaN(number) || !isFinite(value) ? NaN : number;\n      }\n\n      var isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n      if (options.convert && 'precision' in this._flags && isNumber) {\n        // This is conceptually equivalent to using toFixed but it should be much faster\n        var precision = Math.pow(10, this._flags.precision);\n        result.value = Math.round(result.value * precision) / precision;\n      }\n\n      result.errors = isNumber ? null : this.createError('number.base', {\n        value: value\n      }, state, options);\n      return result;\n    }\n  }, {\n    key: \"multiple\",\n    value: function multiple(base) {\n      var isRef = Ref.isRef(base);\n\n      if (!isRef) {\n        Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n        Hoek.assert(base > 0, 'multiple must be greater than 0');\n      }\n\n      return this._test('multiple', base, function (value, state, options) {\n        var divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n        if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n          return this.createError('number.ref', {\n            ref: base.key\n          }, state, options);\n        }\n\n        if (value % divisor === 0) {\n          return value;\n        }\n\n        return this.createError('number.multiple', {\n          multiple: base,\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"integer\",\n    value: function integer() {\n      return this._test('integer', undefined, function (value, state, options) {\n        return Number.isSafeInteger(value) ? value : this.createError('number.integer', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"negative\",\n    value: function negative() {\n      return this._test('negative', undefined, function (value, state, options) {\n        if (value < 0) {\n          return value;\n        }\n\n        return this.createError('number.negative', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"positive\",\n    value: function positive() {\n      return this._test('positive', undefined, function (value, state, options) {\n        if (value > 0) {\n          return value;\n        }\n\n        return this.createError('number.positive', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"precision\",\n    value: function precision(limit) {\n      Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n      Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n      var obj = this._test('precision', limit, function (value, state, options) {\n        var places = value.toString().match(internals.precisionRx);\n        var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n\n        if (decimals <= limit) {\n          return value;\n        }\n\n        return this.createError('number.precision', {\n          limit: limit,\n          value: value\n        }, state, options);\n      });\n\n      obj._flags.precision = limit;\n      return obj;\n    }\n  }, {\n    key: \"port\",\n    value: function port() {\n      return this._test('port', undefined, function (value, state, options) {\n        if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n          return this.createError('number.port', {\n            value: value\n          }, state, options);\n        }\n\n        return value;\n      });\n    }\n  }]);\n\n  return _class;\n}(Any);\n\ninternals.compare = function (type, compare) {\n  return function (limit) {\n    var isRef = Ref.isRef(limit);\n    var isNumber = typeof limit === 'number' && !isNaN(limit);\n    Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n    return this._test(type, limit, function (value, state, options) {\n      var compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n          return this.createError('number.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (compare(value, compareTo)) {\n        return value;\n      }\n\n      return this.createError('number.' + type, {\n        limit: compareTo,\n        value: value\n      }, state, options);\n    });\n  };\n};\n\ninternals.Number.prototype.min = internals.compare('min', function (value, limit) {\n  return value >= limit;\n});\ninternals.Number.prototype.max = internals.compare('max', function (value, limit) {\n  return value <= limit;\n});\ninternals.Number.prototype.greater = internals.compare('greater', function (value, limit) {\n  return value > limit;\n});\ninternals.Number.prototype.less = internals.compare('less', function (value, limit) {\n  return value < limit;\n});\nmodule.exports = new internals.Number();","map":{"version":3,"sources":["/home/cloudmynds/Desktop/admin/node_modules/joi/lib/types/number/index.js"],"names":["Any","require","Ref","Hoek","internals","precisionRx","Number","_type","_invalids","add","Infinity","value","state","options","result","errors","convert","number","parseFloat","isNaN","isFinite","NaN","isNumber","_flags","precision","Math","pow","round","createError","base","isRef","assert","_test","divisor","reference","parent","ref","key","multiple","undefined","isSafeInteger","limit","obj","places","toString","match","decimals","max","length","parseInt","compare","type","compareTo","prototype","min","greater","less","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n// Load modules\n\nconst Any = require('../any');\nconst Ref = require('../../ref');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {\n    precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/\n};\n\n\ninternals.Number = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'number';\n        this._invalids.add(Infinity);\n        this._invalids.add(-Infinity);\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            errors: null,\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            const number = parseFloat(value);\n            result.value = (isNaN(number) || !isFinite(value)) ? NaN : number;\n        }\n\n        const isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n        if (options.convert && 'precision' in this._flags && isNumber) {\n\n            // This is conceptually equivalent to using toFixed but it should be much faster\n            const precision = Math.pow(10, this._flags.precision);\n            result.value = Math.round(result.value * precision) / precision;\n        }\n\n        result.errors = isNumber ? null : this.createError('number.base', { value }, state, options);\n        return result;\n    }\n\n    multiple(base) {\n\n        const isRef = Ref.isRef(base);\n\n        if (!isRef) {\n            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n            Hoek.assert(base > 0, 'multiple must be greater than 0');\n        }\n\n        return this._test('multiple', base, function (value, state, options) {\n\n            const divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n                return this.createError('number.ref', { ref: base.key }, state, options);\n            }\n\n            if (value % divisor === 0) {\n                return value;\n            }\n\n            return this.createError('number.multiple', { multiple: base, value }, state, options);\n        });\n    }\n\n    integer() {\n\n        return this._test('integer', undefined, function (value, state, options) {\n\n            return Number.isSafeInteger(value) ? value : this.createError('number.integer', { value }, state, options);\n        });\n    }\n\n    negative() {\n\n        return this._test('negative', undefined, function (value, state, options) {\n\n            if (value < 0) {\n                return value;\n            }\n\n            return this.createError('number.negative', { value }, state, options);\n        });\n    }\n\n    positive() {\n\n        return this._test('positive', undefined, function (value, state, options) {\n\n            if (value > 0) {\n                return value;\n            }\n\n            return this.createError('number.positive', { value }, state, options);\n        });\n    }\n\n    precision(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n        Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n        const obj = this._test('precision', limit, function (value, state, options) {\n\n            const places = value.toString().match(internals.precisionRx);\n            const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n            if (decimals <= limit) {\n                return value;\n            }\n\n            return this.createError('number.precision', { limit, value }, state, options);\n        });\n\n        obj._flags.precision = limit;\n        return obj;\n    }\n\n    port() {\n\n        return this._test('port', undefined, function (value, state, options) {\n\n            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n                return this.createError('number.port', { value }, state, options);\n            }\n\n            return value;\n        });\n    }\n\n};\n\n\ninternals.compare = function (type, compare) {\n\n    return function (limit) {\n\n        const isRef = Ref.isRef(limit);\n        const isNumber = typeof limit === 'number' && !isNaN(limit);\n\n        Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n\n        return this._test(type, limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n                    return this.createError('number.ref', { ref: limit.key }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (compare(value, compareTo)) {\n                return value;\n            }\n\n            return this.createError('number.' + type, { limit: compareTo, value }, state, options);\n        });\n    };\n};\n\n\ninternals.Number.prototype.min = internals.compare('min', (value, limit) => value >= limit);\ninternals.Number.prototype.max = internals.compare('max', (value, limit) => value <= limit);\ninternals.Number.prototype.greater = internals.compare('greater', (value, limit) => value > limit);\ninternals.Number.prototype.less = internals.compare('less', (value, limit) => value < limit);\n\n\nmodule.exports = new internals.Number();\n"]},"metadata":{},"sourceType":"script"}