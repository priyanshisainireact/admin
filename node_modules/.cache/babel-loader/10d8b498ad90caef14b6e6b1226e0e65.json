{"ast":null,"code":"'use strict'; // Load modules\n\nvar _classCallCheck = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cloudmynds/Desktop/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Hoek = require('hoek');\n\nvar Settings = require('./settings');\n\nvar Ref = require('../../ref');\n\nvar Errors = require('../../errors');\n\nvar Alternatives = null; // Delay-loaded to prevent circular dependencies\n\nvar Cast = null; // Declare internals\n\nvar internals = {\n  Set: require('../../set')\n};\ninternals.defaults = {\n  abortEarly: true,\n  convert: true,\n  allowUnknown: false,\n  skipFunctions: false,\n  stripUnknown: false,\n  language: {},\n  presence: 'optional',\n  strip: false,\n  noDefaults: false,\n  escapeHtml: false // context: null\n\n};\n\nmodule.exports = internals.Any = /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n\n    Cast = Cast || require('../../cast');\n    this.isJoi = true;\n    this._type = 'any';\n    this._settings = null;\n    this._valids = new internals.Set();\n    this._invalids = new internals.Set();\n    this._tests = [];\n    this._refs = [];\n    this._flags = {\n      /*\n       presence: 'optional',                   // optional, required, forbidden, ignore\n       allowOnly: false,\n       allowUnknown: undefined,\n       default: undefined,\n       forbidden: false,\n       encoding: undefined,\n       insensitive: false,\n       trim: false,\n       normalize: undefined,                   // NFC, NFD, NFKC, NFKD\n       case: undefined,                        // upper, lower\n       empty: undefined,\n       func: false,\n       raw: false\n       */\n    };\n    this._description = null;\n    this._unit = null;\n    this._notes = [];\n    this._tags = [];\n    this._examples = [];\n    this._meta = [];\n    this._inner = {}; // Hash of arrays of immutable objects\n  }\n\n  _createClass(_class, [{\n    key: \"_init\",\n    value: function _init() {\n      return this;\n    }\n  }, {\n    key: \"createError\",\n    value: function createError(type, context, state, options) {\n      var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this._flags;\n      return Errors.create(type, context, state, options, flags);\n    }\n  }, {\n    key: \"createOverrideError\",\n    value: function createOverrideError(type, context, state, options, message, template) {\n      return Errors.create(type, context, state, options, this._flags, message, template);\n    }\n  }, {\n    key: \"checkOptions\",\n    value: function checkOptions(options) {\n      var Schemas = require('../../schemas');\n\n      var result = Schemas.options.validate(options);\n\n      if (result.error) {\n        throw new Error(result.error.details[0].message);\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var obj = Object.create(Object.getPrototypeOf(this));\n      obj.isJoi = true;\n      obj._currentJoi = this._currentJoi;\n      obj._type = this._type;\n      obj._settings = this._settings;\n      obj._baseType = this._baseType;\n      obj._valids = this._valids.slice();\n      obj._invalids = this._invalids.slice();\n      obj._tests = this._tests.slice();\n      obj._refs = this._refs.slice();\n      obj._flags = Hoek.clone(this._flags);\n      obj._description = this._description;\n      obj._unit = this._unit;\n      obj._notes = this._notes.slice();\n      obj._tags = this._tags.slice();\n      obj._examples = this._examples.slice();\n      obj._meta = this._meta.slice();\n      obj._inner = {};\n      var inners = Object.keys(this._inner);\n\n      for (var i = 0; i < inners.length; ++i) {\n        var key = inners[i];\n        obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(schema) {\n      Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');\n      Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);\n      var obj = this.clone();\n\n      if (this._type === 'any' && schema._type !== 'any') {\n        // Reset values as if we were \"this\"\n        var tmpObj = schema.clone();\n        var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit', '_notes', '_tags', '_examples', '_meta', '_inner'];\n\n        for (var i = 0; i < keysToRestore.length; ++i) {\n          tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];\n        }\n\n        obj = tmpObj;\n      }\n\n      obj._settings = obj._settings ? Settings.concat(obj._settings, schema._settings) : schema._settings;\n\n      obj._valids.merge(schema._valids, schema._invalids);\n\n      obj._invalids.merge(schema._invalids, schema._valids);\n\n      obj._tests = obj._tests.concat(schema._tests);\n      obj._refs = obj._refs.concat(schema._refs);\n      Hoek.merge(obj._flags, schema._flags);\n      obj._description = schema._description || obj._description;\n      obj._unit = schema._unit || obj._unit;\n      obj._notes = obj._notes.concat(schema._notes);\n      obj._tags = obj._tags.concat(schema._tags);\n      obj._examples = obj._examples.concat(schema._examples);\n      obj._meta = obj._meta.concat(schema._meta);\n      var inners = Object.keys(schema._inner);\n      var isObject = obj._type === 'object';\n\n      for (var _i = 0; _i < inners.length; ++_i) {\n        var key = inners[_i];\n        var source = schema._inner[key];\n\n        if (source) {\n          var target = obj._inner[key];\n\n          if (target) {\n            if (isObject && key === 'children') {\n              var keys = {};\n\n              for (var j = 0; j < target.length; ++j) {\n                keys[target[j].key] = j;\n              }\n\n              for (var _j = 0; _j < source.length; ++_j) {\n                var sourceKey = source[_j].key;\n\n                if (keys[sourceKey] >= 0) {\n                  target[keys[sourceKey]] = {\n                    key: sourceKey,\n                    schema: target[keys[sourceKey]].schema.concat(source[_j].schema)\n                  };\n                } else {\n                  target.push(source[_j]);\n                }\n              }\n            } else {\n              obj._inner[key] = obj._inner[key].concat(source);\n            }\n          } else {\n            obj._inner[key] = source.slice();\n          }\n        }\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"_test\",\n    value: function _test(name, arg, func, options) {\n      var obj = this.clone();\n\n      obj._tests.push({\n        func: func,\n        name: name,\n        arg: arg,\n        options: options\n      });\n\n      return obj;\n    }\n  }, {\n    key: \"options\",\n    value: function options(_options) {\n      Hoek.assert(!_options.context, 'Cannot override context');\n      this.checkOptions(_options);\n      var obj = this.clone();\n      obj._settings = Settings.concat(obj._settings, _options);\n      return obj;\n    }\n  }, {\n    key: \"strict\",\n    value: function strict(isStrict) {\n      var obj = this.clone();\n      var convert = isStrict === undefined ? false : !isStrict;\n      obj._settings = Settings.concat(obj._settings, {\n        convert: convert\n      });\n      return obj;\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(isRaw) {\n      var value = isRaw === undefined ? true : isRaw;\n\n      if (this._flags.raw === value) {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.raw = value;\n      return obj;\n    }\n  }, {\n    key: \"error\",\n    value: function error(err) {\n      Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');\n      var obj = this.clone();\n      obj._flags.error = err;\n      return obj;\n    }\n  }, {\n    key: \"allow\",\n    value: function allow() {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      var obj = this.clone();\n      values = Hoek.flatten(values);\n\n      for (var i = 0; i < values.length; ++i) {\n        var value = values[i];\n        Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n\n        obj._invalids.remove(value);\n\n        obj._valids.add(value, obj._refs);\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      var obj = this.allow.apply(this, arguments);\n      obj._flags.allowOnly = true;\n      return obj;\n    }\n  }, {\n    key: \"invalid\",\n    value: function invalid() {\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      var obj = this.clone();\n      values = Hoek.flatten(values);\n\n      for (var i = 0; i < values.length; ++i) {\n        var value = values[i];\n        Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n\n        obj._valids.remove(value);\n\n        obj._invalids.add(value, obj._refs);\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"required\",\n    value: function required() {\n      if (this._flags.presence === 'required') {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.presence = 'required';\n      return obj;\n    }\n  }, {\n    key: \"optional\",\n    value: function optional() {\n      if (this._flags.presence === 'optional') {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.presence = 'optional';\n      return obj;\n    }\n  }, {\n    key: \"forbidden\",\n    value: function forbidden() {\n      if (this._flags.presence === 'forbidden') {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.presence = 'forbidden';\n      return obj;\n    }\n  }, {\n    key: \"strip\",\n    value: function strip() {\n      if (this._flags.strip) {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.strip = true;\n      return obj;\n    }\n  }, {\n    key: \"applyFunctionToChildren\",\n    value: function applyFunctionToChildren(children, fn, args, root) {\n      children = [].concat(children);\n\n      if (children.length !== 1 || children[0] !== '') {\n        root = root ? root + '.' : '';\n        var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {\n          return root + child;\n        });\n        throw new Error('unknown key(s) ' + extraChildren.join(', '));\n      }\n\n      return this[fn].apply(this, args);\n    }\n  }, {\n    key: \"default\",\n    value: function _default(value, description) {\n      if (typeof value === 'function' && !Ref.isRef(value)) {\n        if (!value.description && description) {\n          value.description = description;\n        }\n\n        if (!this._flags.func) {\n          Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');\n        }\n      }\n\n      var obj = this.clone();\n      obj._flags.default = value;\n      Ref.push(obj._refs, value);\n      return obj;\n    }\n  }, {\n    key: \"empty\",\n    value: function empty(schema) {\n      var obj = this.clone();\n\n      if (schema === undefined) {\n        delete obj._flags.empty;\n      } else {\n        obj._flags.empty = Cast.schema(this._currentJoi, schema);\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"when\",\n    value: function when(condition, options) {\n      Hoek.assert(options && typeof options === 'object', 'Invalid options');\n      Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of \"then\" or \"otherwise\"');\n      var then = options.hasOwnProperty('then') ? this.concat(Cast.schema(this._currentJoi, options.then)) : undefined;\n      var otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(this._currentJoi, options.otherwise)) : undefined;\n      Alternatives = Alternatives || require('../alternatives');\n      var alternativeOptions = {\n        then: then,\n        otherwise: otherwise\n      };\n\n      if (Object.prototype.hasOwnProperty.call(options, 'is')) {\n        alternativeOptions.is = options.is;\n      }\n\n      var obj = Alternatives.when(condition, alternativeOptions);\n      obj._flags.presence = 'ignore';\n      obj._baseType = this;\n      return obj;\n    }\n  }, {\n    key: \"description\",\n    value: function description(desc) {\n      Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');\n      var obj = this.clone();\n      obj._description = desc;\n      return obj;\n    }\n  }, {\n    key: \"notes\",\n    value: function notes(_notes) {\n      Hoek.assert(_notes && (typeof _notes === 'string' || Array.isArray(_notes)), 'Notes must be a non-empty string or array');\n      var obj = this.clone();\n      obj._notes = obj._notes.concat(_notes);\n      return obj;\n    }\n  }, {\n    key: \"tags\",\n    value: function tags(_tags) {\n      Hoek.assert(_tags && (typeof _tags === 'string' || Array.isArray(_tags)), 'Tags must be a non-empty string or array');\n      var obj = this.clone();\n      obj._tags = obj._tags.concat(_tags);\n      return obj;\n    }\n  }, {\n    key: \"meta\",\n    value: function meta(_meta) {\n      Hoek.assert(_meta !== undefined, 'Meta cannot be undefined');\n      var obj = this.clone();\n      obj._meta = obj._meta.concat(_meta);\n      return obj;\n    }\n  }, {\n    key: \"example\",\n    value: function example() {\n      Hoek.assert(arguments.length === 1, 'Missing example');\n      var value = arguments.length <= 0 ? undefined : arguments[0];\n      var obj = this.clone();\n\n      obj._examples.push(value);\n\n      return obj;\n    }\n  }, {\n    key: \"unit\",\n    value: function unit(name) {\n      Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');\n      var obj = this.clone();\n      obj._unit = name;\n      return obj;\n    }\n  }, {\n    key: \"_prepareEmptyValue\",\n    value: function _prepareEmptyValue(value) {\n      if (typeof value === 'string' && this._flags.trim) {\n        return value.trim();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"_validate\",\n    value: function _validate(value, state, options, reference) {\n      var _this = this;\n\n      var originalValue = value; // Setup state and settings\n\n      state = state || {\n        key: '',\n        path: [],\n        parent: null,\n        reference: reference\n      };\n\n      if (this._settings) {\n        options = Settings.concat(options, this._settings);\n      }\n\n      var errors = [];\n\n      var finish = function finish() {\n        var finalValue;\n\n        if (value !== undefined) {\n          finalValue = _this._flags.raw ? originalValue : value;\n        } else if (options.noDefaults) {\n          finalValue = value;\n        } else if (Ref.isRef(_this._flags.default)) {\n          finalValue = _this._flags.default(state.parent, options);\n        } else if (typeof _this._flags.default === 'function' && !(_this._flags.func && !_this._flags.default.description)) {\n          var args;\n\n          if (state.parent !== null && _this._flags.default.length > 0) {\n            args = [Hoek.clone(state.parent), options];\n          }\n\n          var defaultValue = internals._try(_this._flags.default, args);\n\n          finalValue = defaultValue.value;\n\n          if (defaultValue.error) {\n            errors.push(_this.createError('any.default', {\n              error: defaultValue.error\n            }, state, options));\n          }\n        } else {\n          finalValue = Hoek.clone(_this._flags.default);\n        }\n\n        if (errors.length && typeof _this._flags.error === 'function') {\n          var change = _this._flags.error.call(_this, errors);\n\n          if (typeof change === 'string') {\n            errors = [_this.createOverrideError('override', {\n              reason: errors\n            }, state, options, change)];\n          } else {\n            errors = [].concat(change).map(function (err) {\n              return err instanceof Error ? err : _this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);\n            });\n          }\n        }\n\n        return {\n          value: _this._flags.strip ? undefined : finalValue,\n          finalValue: finalValue,\n          errors: errors.length ? errors : null\n        };\n      };\n\n      if (this._coerce) {\n        var coerced = this._coerce.call(this, value, state, options);\n\n        if (coerced.errors) {\n          value = coerced.value;\n          errors = errors.concat(coerced.errors);\n          return finish(); // Coerced error always aborts early\n        }\n\n        value = coerced.value;\n      }\n\n      if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {\n        value = undefined;\n      } // Check presence requirements\n\n\n      var presence = this._flags.presence || options.presence;\n\n      if (presence === 'optional') {\n        if (value === undefined) {\n          var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;\n\n          if (isDeepDefault && this._type === 'object') {\n            value = {};\n          } else {\n            return finish();\n          }\n        }\n      } else if (presence === 'required' && value === undefined) {\n        errors.push(this.createError('any.required', null, state, options));\n        return finish();\n      } else if (presence === 'forbidden') {\n        if (value === undefined) {\n          return finish();\n        }\n\n        errors.push(this.createError('any.unknown', null, state, options));\n        return finish();\n      } // Check allowed and denied values using the original value\n\n\n      if (this._valids.has(value, state, options, this._flags.insensitive)) {\n        return finish();\n      }\n\n      if (this._invalids.has(value, state, options, this._flags.insensitive)) {\n        errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {\n          value: value,\n          invalids: this._invalids.values({\n            stripUndefined: true\n          })\n        }, state, options));\n\n        if (options.abortEarly || value === undefined) {\n          // No reason to keep validating missing value\n          return finish();\n        }\n      } // Convert value and validate type\n\n\n      if (this._base) {\n        var base = this._base.call(this, value, state, options);\n\n        if (base.errors) {\n          value = base.value;\n          errors = errors.concat(base.errors);\n          return finish(); // Base error always aborts early\n        }\n\n        if (base.value !== value) {\n          value = base.value; // Check allowed and denied values using the converted value\n\n          if (this._valids.has(value, state, options, this._flags.insensitive)) {\n            return finish();\n          }\n\n          if (this._invalids.has(value, state, options, this._flags.insensitive)) {\n            errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', {\n              value: value,\n              invalids: this._invalids.values({\n                stripUndefined: true\n              })\n            }, state, options));\n\n            if (options.abortEarly) {\n              return finish();\n            }\n          }\n        }\n      } // Required values did not match\n\n\n      if (this._flags.allowOnly) {\n        errors.push(this.createError('any.allowOnly', {\n          value: value,\n          valids: this._valids.values({\n            stripUndefined: true\n          })\n        }, state, options));\n\n        if (options.abortEarly) {\n          return finish();\n        }\n      } // Validate tests\n\n\n      for (var i = 0; i < this._tests.length; ++i) {\n        var test = this._tests[i];\n        var ret = test.func.call(this, value, state, options);\n\n        if (ret instanceof Errors.Err) {\n          errors.push(ret);\n\n          if (options.abortEarly) {\n            return finish();\n          }\n        } else {\n          value = ret;\n        }\n      }\n\n      return finish();\n    }\n  }, {\n    key: \"_validateWithOptions\",\n    value: function _validateWithOptions(value, options, callback) {\n      if (options) {\n        this.checkOptions(options);\n      }\n\n      var settings = Settings.concat(internals.defaults, options);\n\n      var result = this._validate(value, null, settings);\n\n      var errors = Errors.process(result.errors, value);\n\n      if (callback) {\n        return callback(errors, result.value);\n      }\n\n      return {\n        error: errors,\n        value: result.value,\n        then: function then(resolve, reject) {\n          if (errors) {\n            return Promise.reject(errors).catch(reject);\n          }\n\n          return Promise.resolve(result.value).then(resolve);\n        },\n        catch: function _catch(reject) {\n          if (errors) {\n            return Promise.reject(errors).catch(reject);\n          }\n\n          return Promise.resolve(result.value);\n        }\n      };\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(value, options, callback) {\n      if (typeof options === 'function') {\n        return this._validateWithOptions(value, null, options);\n      }\n\n      return this._validateWithOptions(value, options, callback);\n    }\n  }, {\n    key: \"describe\",\n    value: function describe() {\n      var _this2 = this;\n\n      var description = {\n        type: this._type\n      };\n      var flags = Object.keys(this._flags);\n\n      if (flags.length) {\n        if (['empty', 'default', 'lazy', 'label'].some(function (flag) {\n          return _this2._flags.hasOwnProperty(flag);\n        })) {\n          description.flags = {};\n\n          for (var i = 0; i < flags.length; ++i) {\n            var flag = flags[i];\n\n            if (flag === 'empty') {\n              description.flags[flag] = this._flags[flag].describe();\n            } else if (flag === 'default') {\n              if (Ref.isRef(this._flags[flag])) {\n                description.flags[flag] = this._flags[flag].toString();\n              } else if (typeof this._flags[flag] === 'function') {\n                description.flags[flag] = {\n                  description: this._flags[flag].description,\n                  function: this._flags[flag]\n                };\n              } else {\n                description.flags[flag] = this._flags[flag];\n              }\n            } else if (flag === 'lazy' || flag === 'label') {// We don't want it in the description\n            } else {\n              description.flags[flag] = this._flags[flag];\n            }\n          }\n        } else {\n          description.flags = this._flags;\n        }\n      }\n\n      if (this._settings) {\n        description.options = Hoek.clone(this._settings);\n      }\n\n      if (this._baseType) {\n        description.base = this._baseType.describe();\n      }\n\n      if (this._description) {\n        description.description = this._description;\n      }\n\n      if (this._notes.length) {\n        description.notes = this._notes;\n      }\n\n      if (this._tags.length) {\n        description.tags = this._tags;\n      }\n\n      if (this._meta.length) {\n        description.meta = this._meta;\n      }\n\n      if (this._examples.length) {\n        description.examples = this._examples;\n      }\n\n      if (this._unit) {\n        description.unit = this._unit;\n      }\n\n      var valids = this._valids.values();\n\n      if (valids.length) {\n        description.valids = valids.map(function (v) {\n          return Ref.isRef(v) ? v.toString() : v;\n        });\n      }\n\n      var invalids = this._invalids.values();\n\n      if (invalids.length) {\n        description.invalids = invalids.map(function (v) {\n          return Ref.isRef(v) ? v.toString() : v;\n        });\n      }\n\n      description.rules = [];\n\n      for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {\n        var validator = this._tests[_i2];\n        var item = {\n          name: validator.name\n        };\n\n        if (validator.arg !== void 0) {\n          item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;\n        }\n\n        var options = validator.options;\n\n        if (options) {\n          if (options.hasRef) {\n            item.arg = {};\n            var keys = Object.keys(validator.arg);\n\n            for (var j = 0; j < keys.length; ++j) {\n              var key = keys[j];\n              var value = validator.arg[key];\n              item.arg[key] = Ref.isRef(value) ? value.toString() : value;\n            }\n          }\n\n          if (typeof options.description === 'string') {\n            item.description = options.description;\n          } else if (typeof options.description === 'function') {\n            item.description = options.description(item.arg);\n          }\n        }\n\n        description.rules.push(item);\n      }\n\n      if (!description.rules.length) {\n        delete description.rules;\n      }\n\n      var label = this._getLabel();\n\n      if (label) {\n        description.label = label;\n      }\n\n      return description;\n    }\n  }, {\n    key: \"label\",\n    value: function label(name) {\n      Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');\n      var obj = this.clone();\n      obj._flags.label = name;\n      return obj;\n    }\n  }, {\n    key: \"_getLabel\",\n    value: function _getLabel(def) {\n      return this._flags.label || def;\n    }\n  }, {\n    key: \"schemaType\",\n    get: function get() {\n      return this._type;\n    }\n  }]);\n\n  return _class;\n}();\n\ninternals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects\n// Aliases\n\ninternals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;\ninternals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;\ninternals.Any.prototype.exist = internals.Any.prototype.required;\n\ninternals._try = function (fn, args) {\n  var err;\n  var result;\n\n  try {\n    result = fn.apply(null, args);\n  } catch (e) {\n    err = e;\n  }\n\n  return {\n    value: result,\n    error: err\n  };\n};","map":{"version":3,"sources":["/home/cloudmynds/Desktop/admin/node_modules/joi/lib/types/any/index.js"],"names":["Hoek","require","Settings","Ref","Errors","Alternatives","Cast","internals","Set","defaults","abortEarly","convert","allowUnknown","skipFunctions","stripUnknown","language","presence","strip","noDefaults","escapeHtml","module","exports","Any","isJoi","_type","_settings","_valids","_invalids","_tests","_refs","_flags","_description","_unit","_notes","_tags","_examples","_meta","_inner","type","context","state","options","flags","create","message","template","Schemas","result","validate","error","Error","details","obj","Object","getPrototypeOf","_currentJoi","_baseType","slice","clone","inners","keys","i","length","key","schema","assert","tmpObj","keysToRestore","concat","merge","isObject","source","target","j","sourceKey","push","name","arg","func","checkOptions","isStrict","undefined","isRaw","value","raw","err","values","flatten","remove","add","allow","allowOnly","children","fn","args","root","extraChildren","map","child","join","apply","description","isRef","default","empty","condition","then","otherwise","hasOwnProperty","alternativeOptions","prototype","call","is","when","desc","notes","Array","isArray","tags","meta","trim","reference","originalValue","path","parent","errors","finish","finalValue","defaultValue","_try","createError","change","createOverrideError","reason","_coerce","coerced","_validate","_prepareEmptyValue","isDeepDefault","has","insensitive","invalids","stripUndefined","_base","base","valids","test","ret","Err","callback","settings","process","resolve","reject","Promise","catch","_validateWithOptions","some","flag","describe","toString","function","examples","unit","v","rules","validator","item","hasRef","label","_getLabel","def","isImmutable","only","equal","valid","disallow","not","invalid","exist","required","e"],"mappings":"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","sourcesContent":["'use strict';\n\n// Load modules\n\nconst Hoek = require('hoek');\nconst Settings = require('./settings');\nconst Ref = require('../../ref');\nconst Errors = require('../../errors');\nlet Alternatives = null;                // Delay-loaded to prevent circular dependencies\nlet Cast = null;\n\n\n// Declare internals\n\nconst internals = {\n    Set: require('../../set')\n};\n\n\ninternals.defaults = {\n    abortEarly: true,\n    convert: true,\n    allowUnknown: false,\n    skipFunctions: false,\n    stripUnknown: false,\n    language: {},\n    presence: 'optional',\n    strip: false,\n    noDefaults: false,\n    escapeHtml: false\n\n    // context: null\n};\n\n\nmodule.exports = internals.Any = class {\n\n    constructor() {\n\n        Cast = Cast || require('../../cast');\n\n        this.isJoi = true;\n        this._type = 'any';\n        this._settings = null;\n        this._valids = new internals.Set();\n        this._invalids = new internals.Set();\n        this._tests = [];\n        this._refs = [];\n        this._flags = {\n            /*\n             presence: 'optional',                   // optional, required, forbidden, ignore\n             allowOnly: false,\n             allowUnknown: undefined,\n             default: undefined,\n             forbidden: false,\n             encoding: undefined,\n             insensitive: false,\n             trim: false,\n             normalize: undefined,                   // NFC, NFD, NFKC, NFKD\n             case: undefined,                        // upper, lower\n             empty: undefined,\n             func: false,\n             raw: false\n             */\n        };\n\n        this._description = null;\n        this._unit = null;\n        this._notes = [];\n        this._tags = [];\n        this._examples = [];\n        this._meta = [];\n\n        this._inner = {};                           // Hash of arrays of immutable objects\n    }\n\n    _init() {\n\n        return this;\n    }\n\n    get schemaType() {\n\n        return this._type;\n    }\n\n    createError(type, context, state, options, flags = this._flags) {\n\n        return Errors.create(type, context, state, options, flags);\n    }\n\n    createOverrideError(type, context, state, options, message, template) {\n\n        return Errors.create(type, context, state, options, this._flags, message, template);\n    }\n\n    checkOptions(options) {\n\n        const Schemas = require('../../schemas');\n        const result = Schemas.options.validate(options);\n        if (result.error) {\n            throw new Error(result.error.details[0].message);\n        }\n    }\n\n    clone() {\n\n        const obj = Object.create(Object.getPrototypeOf(this));\n\n        obj.isJoi = true;\n        obj._currentJoi = this._currentJoi;\n        obj._type = this._type;\n        obj._settings = this._settings;\n        obj._baseType = this._baseType;\n        obj._valids = this._valids.slice();\n        obj._invalids = this._invalids.slice();\n        obj._tests = this._tests.slice();\n        obj._refs = this._refs.slice();\n        obj._flags = Hoek.clone(this._flags);\n\n        obj._description = this._description;\n        obj._unit = this._unit;\n        obj._notes = this._notes.slice();\n        obj._tags = this._tags.slice();\n        obj._examples = this._examples.slice();\n        obj._meta = this._meta.slice();\n\n        obj._inner = {};\n        const inners = Object.keys(this._inner);\n        for (let i = 0; i < inners.length; ++i) {\n            const key = inners[i];\n            obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;\n        }\n\n        return obj;\n    }\n\n    concat(schema) {\n\n        Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');\n        Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);\n\n        let obj = this.clone();\n\n        if (this._type === 'any' && schema._type !== 'any') {\n\n            // Reset values as if we were \"this\"\n            const tmpObj = schema.clone();\n            const keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit',\n                '_notes', '_tags', '_examples', '_meta', '_inner'];\n\n            for (let i = 0; i < keysToRestore.length; ++i) {\n                tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];\n            }\n\n            obj = tmpObj;\n        }\n\n        obj._settings = obj._settings ? Settings.concat(obj._settings, schema._settings) : schema._settings;\n        obj._valids.merge(schema._valids, schema._invalids);\n        obj._invalids.merge(schema._invalids, schema._valids);\n        obj._tests = obj._tests.concat(schema._tests);\n        obj._refs = obj._refs.concat(schema._refs);\n        Hoek.merge(obj._flags, schema._flags);\n\n        obj._description = schema._description || obj._description;\n        obj._unit = schema._unit || obj._unit;\n        obj._notes = obj._notes.concat(schema._notes);\n        obj._tags = obj._tags.concat(schema._tags);\n        obj._examples = obj._examples.concat(schema._examples);\n        obj._meta = obj._meta.concat(schema._meta);\n\n        const inners = Object.keys(schema._inner);\n        const isObject = obj._type === 'object';\n        for (let i = 0; i < inners.length; ++i) {\n            const key = inners[i];\n            const source = schema._inner[key];\n            if (source) {\n                const target = obj._inner[key];\n                if (target) {\n                    if (isObject && key === 'children') {\n                        const keys = {};\n\n                        for (let j = 0; j < target.length; ++j) {\n                            keys[target[j].key] = j;\n                        }\n\n                        for (let j = 0; j < source.length; ++j) {\n                            const sourceKey = source[j].key;\n                            if (keys[sourceKey] >= 0) {\n                                target[keys[sourceKey]] = {\n                                    key: sourceKey,\n                                    schema: target[keys[sourceKey]].schema.concat(source[j].schema)\n                                };\n                            }\n                            else {\n                                target.push(source[j]);\n                            }\n                        }\n                    }\n                    else {\n                        obj._inner[key] = obj._inner[key].concat(source);\n                    }\n                }\n                else {\n                    obj._inner[key] = source.slice();\n                }\n            }\n        }\n\n        return obj;\n    }\n\n    _test(name, arg, func, options) {\n\n        const obj = this.clone();\n        obj._tests.push({ func, name, arg, options });\n        return obj;\n    }\n\n    options(options) {\n\n        Hoek.assert(!options.context, 'Cannot override context');\n        this.checkOptions(options);\n\n        const obj = this.clone();\n        obj._settings = Settings.concat(obj._settings, options);\n        return obj;\n    }\n\n    strict(isStrict) {\n\n        const obj = this.clone();\n\n        const convert = isStrict === undefined ? false : !isStrict;\n        obj._settings = Settings.concat(obj._settings, { convert });\n        return obj;\n    }\n\n    raw(isRaw) {\n\n        const value = isRaw === undefined ? true : isRaw;\n\n        if (this._flags.raw === value) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.raw = value;\n        return obj;\n    }\n\n    error(err) {\n\n        Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');\n\n        const obj = this.clone();\n        obj._flags.error = err;\n        return obj;\n    }\n\n    allow(...values) {\n\n        const obj = this.clone();\n        values = Hoek.flatten(values);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n\n            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n            obj._invalids.remove(value);\n            obj._valids.add(value, obj._refs);\n        }\n        return obj;\n    }\n\n    valid(...values) {\n\n        const obj = this.allow(...values);\n        obj._flags.allowOnly = true;\n        return obj;\n    }\n\n    invalid(...values) {\n\n        const obj = this.clone();\n        values = Hoek.flatten(values);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n\n            Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');\n            obj._valids.remove(value);\n            obj._invalids.add(value, obj._refs);\n        }\n\n        return obj;\n    }\n\n    required() {\n\n        if (this._flags.presence === 'required') {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.presence = 'required';\n        return obj;\n    }\n\n    optional() {\n\n        if (this._flags.presence === 'optional') {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.presence = 'optional';\n        return obj;\n    }\n\n\n    forbidden() {\n\n        if (this._flags.presence === 'forbidden') {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.presence = 'forbidden';\n        return obj;\n    }\n\n\n    strip() {\n\n        if (this._flags.strip) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.strip = true;\n        return obj;\n    }\n\n    applyFunctionToChildren(children, fn, args, root) {\n\n        children = [].concat(children);\n\n        if (children.length !== 1 || children[0] !== '') {\n            root = root ? (root + '.') : '';\n\n            const extraChildren = (children[0] === '' ? children.slice(1) : children).map((child) => {\n\n                return root + child;\n            });\n\n            throw new Error('unknown key(s) ' + extraChildren.join(', '));\n        }\n\n        return this[fn].apply(this, args);\n    }\n\n    default(value, description) {\n\n        if (typeof value === 'function' &&\n            !Ref.isRef(value)) {\n\n            if (!value.description &&\n                description) {\n\n                value.description = description;\n            }\n\n            if (!this._flags.func) {\n                Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');\n            }\n        }\n\n        const obj = this.clone();\n        obj._flags.default = value;\n        Ref.push(obj._refs, value);\n        return obj;\n    }\n\n    empty(schema) {\n\n        const obj = this.clone();\n        if (schema === undefined) {\n            delete obj._flags.empty;\n        }\n        else {\n            obj._flags.empty = Cast.schema(this._currentJoi, schema);\n        }\n        return obj;\n    }\n\n    when(condition, options) {\n\n        Hoek.assert(options && typeof options === 'object', 'Invalid options');\n        Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of \"then\" or \"otherwise\"');\n\n        const then = options.hasOwnProperty('then') ? this.concat(Cast.schema(this._currentJoi, options.then)) : undefined;\n        const otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(this._currentJoi, options.otherwise)) : undefined;\n\n        Alternatives = Alternatives || require('../alternatives');\n\n        const alternativeOptions = { then, otherwise };\n        if (Object.prototype.hasOwnProperty.call(options, 'is')) {\n            alternativeOptions.is = options.is;\n        }\n        const obj = Alternatives.when(condition, alternativeOptions);\n        obj._flags.presence = 'ignore';\n        obj._baseType = this;\n\n        return obj;\n    }\n\n    description(desc) {\n\n        Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');\n\n        const obj = this.clone();\n        obj._description = desc;\n        return obj;\n    }\n\n    notes(notes) {\n\n        Hoek.assert(notes && (typeof notes === 'string' || Array.isArray(notes)), 'Notes must be a non-empty string or array');\n\n        const obj = this.clone();\n        obj._notes = obj._notes.concat(notes);\n        return obj;\n    }\n\n    tags(tags) {\n\n        Hoek.assert(tags && (typeof tags === 'string' || Array.isArray(tags)), 'Tags must be a non-empty string or array');\n\n        const obj = this.clone();\n        obj._tags = obj._tags.concat(tags);\n        return obj;\n    }\n\n    meta(meta) {\n\n        Hoek.assert(meta !== undefined, 'Meta cannot be undefined');\n\n        const obj = this.clone();\n        obj._meta = obj._meta.concat(meta);\n        return obj;\n    }\n\n    example(...args) {\n\n        Hoek.assert(args.length === 1, 'Missing example');\n        const value = args[0];\n\n        const obj = this.clone();\n        obj._examples.push(value);\n        return obj;\n    }\n\n    unit(name) {\n\n        Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');\n\n        const obj = this.clone();\n        obj._unit = name;\n        return obj;\n    }\n\n    _prepareEmptyValue(value) {\n\n        if (typeof value === 'string' && this._flags.trim) {\n            return value.trim();\n        }\n\n        return value;\n    }\n\n    _validate(value, state, options, reference) {\n\n        const originalValue = value;\n\n        // Setup state and settings\n\n        state = state || { key: '', path: [], parent: null, reference };\n\n        if (this._settings) {\n            options = Settings.concat(options, this._settings);\n        }\n\n        let errors = [];\n        const finish = () => {\n\n            let finalValue;\n\n            if (value !== undefined) {\n                finalValue = this._flags.raw ? originalValue : value;\n            }\n            else if (options.noDefaults) {\n                finalValue = value;\n            }\n            else if (Ref.isRef(this._flags.default)) {\n                finalValue = this._flags.default(state.parent, options);\n            }\n            else if (typeof this._flags.default === 'function' &&\n                !(this._flags.func && !this._flags.default.description)) {\n\n                let args;\n\n                if (state.parent !== null &&\n                    this._flags.default.length > 0) {\n\n                    args = [Hoek.clone(state.parent), options];\n                }\n\n                const defaultValue = internals._try(this._flags.default, args);\n                finalValue = defaultValue.value;\n                if (defaultValue.error) {\n                    errors.push(this.createError('any.default', { error: defaultValue.error }, state, options));\n                }\n            }\n            else {\n                finalValue = Hoek.clone(this._flags.default);\n            }\n\n            if (errors.length && typeof this._flags.error === 'function') {\n                const change = this._flags.error.call(this, errors);\n\n                if (typeof change === 'string') {\n                    errors = [this.createOverrideError('override', { reason: errors }, state, options, change)];\n                }\n                else {\n                    errors = [].concat(change)\n                        .map((err) => {\n\n                            return err instanceof Error ?\n                                err :\n                                this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);\n                        });\n                }\n            }\n\n            return {\n                value: this._flags.strip ? undefined : finalValue,\n                finalValue,\n                errors: errors.length ? errors : null\n            };\n        };\n\n        if (this._coerce) {\n            const coerced = this._coerce.call(this, value, state, options);\n            if (coerced.errors) {\n                value = coerced.value;\n                errors = errors.concat(coerced.errors);\n                return finish();                            // Coerced error always aborts early\n            }\n\n            value = coerced.value;\n        }\n\n        if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {\n            value = undefined;\n        }\n\n        // Check presence requirements\n\n        const presence = this._flags.presence || options.presence;\n        if (presence === 'optional') {\n            if (value === undefined) {\n                const isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;\n                if (isDeepDefault && this._type === 'object') {\n                    value = {};\n                }\n                else {\n                    return finish();\n                }\n            }\n        }\n        else if (presence === 'required' &&\n            value === undefined) {\n\n            errors.push(this.createError('any.required', null, state, options));\n            return finish();\n        }\n        else if (presence === 'forbidden') {\n            if (value === undefined) {\n                return finish();\n            }\n\n            errors.push(this.createError('any.unknown', null, state, options));\n            return finish();\n        }\n\n        // Check allowed and denied values using the original value\n\n        if (this._valids.has(value, state, options, this._flags.insensitive)) {\n            return finish();\n        }\n\n        if (this._invalids.has(value, state, options, this._flags.insensitive)) {\n            errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', { value, invalids: this._invalids.values({ stripUndefined: true }) }, state, options));\n            if (options.abortEarly ||\n                value === undefined) {          // No reason to keep validating missing value\n\n                return finish();\n            }\n        }\n\n        // Convert value and validate type\n\n        if (this._base) {\n            const base = this._base.call(this, value, state, options);\n            if (base.errors) {\n                value = base.value;\n                errors = errors.concat(base.errors);\n                return finish();                            // Base error always aborts early\n            }\n\n            if (base.value !== value) {\n                value = base.value;\n\n                // Check allowed and denied values using the converted value\n\n                if (this._valids.has(value, state, options, this._flags.insensitive)) {\n                    return finish();\n                }\n\n                if (this._invalids.has(value, state, options, this._flags.insensitive)) {\n                    errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', { value, invalids: this._invalids.values({ stripUndefined: true }) }, state, options));\n                    if (options.abortEarly) {\n                        return finish();\n                    }\n                }\n            }\n        }\n\n        // Required values did not match\n\n        if (this._flags.allowOnly) {\n            errors.push(this.createError('any.allowOnly', { value, valids: this._valids.values({ stripUndefined: true }) }, state, options));\n            if (options.abortEarly) {\n                return finish();\n            }\n        }\n\n        // Validate tests\n\n        for (let i = 0; i < this._tests.length; ++i) {\n            const test = this._tests[i];\n            const ret = test.func.call(this, value, state, options);\n            if (ret instanceof Errors.Err) {\n                errors.push(ret);\n                if (options.abortEarly) {\n                    return finish();\n                }\n            }\n            else {\n                value = ret;\n            }\n        }\n\n        return finish();\n    }\n\n    _validateWithOptions(value, options, callback) {\n\n        if (options) {\n            this.checkOptions(options);\n        }\n\n        const settings = Settings.concat(internals.defaults, options);\n        const result = this._validate(value, null, settings);\n        const errors = Errors.process(result.errors, value);\n\n        if (callback) {\n            return callback(errors, result.value);\n        }\n\n        return {\n            error: errors,\n            value: result.value,\n            then(resolve, reject) {\n\n                if (errors) {\n                    return Promise.reject(errors).catch(reject);\n                }\n\n                return Promise.resolve(result.value).then(resolve);\n            },\n            catch(reject) {\n\n                if (errors) {\n                    return Promise.reject(errors).catch(reject);\n                }\n\n                return Promise.resolve(result.value);\n            }\n        };\n    }\n\n    validate(value, options, callback) {\n\n        if (typeof options === 'function') {\n            return this._validateWithOptions(value, null, options);\n        }\n\n        return this._validateWithOptions(value, options, callback);\n    }\n\n    describe() {\n\n        const description = {\n            type: this._type\n        };\n\n        const flags = Object.keys(this._flags);\n        if (flags.length) {\n            if (['empty', 'default', 'lazy', 'label'].some((flag) => this._flags.hasOwnProperty(flag))) {\n                description.flags = {};\n                for (let i = 0; i < flags.length; ++i) {\n                    const flag = flags[i];\n                    if (flag === 'empty') {\n                        description.flags[flag] = this._flags[flag].describe();\n                    }\n                    else if (flag === 'default') {\n                        if (Ref.isRef(this._flags[flag])) {\n                            description.flags[flag] = this._flags[flag].toString();\n                        }\n                        else if (typeof this._flags[flag] === 'function') {\n                            description.flags[flag] = {\n                                description: this._flags[flag].description,\n                                function   : this._flags[flag]\n                            };\n                        }\n                        else {\n                            description.flags[flag] = this._flags[flag];\n                        }\n                    }\n                    else if (flag === 'lazy' || flag === 'label') {\n                        // We don't want it in the description\n                    }\n                    else {\n                        description.flags[flag] = this._flags[flag];\n                    }\n                }\n            }\n            else {\n                description.flags = this._flags;\n            }\n        }\n\n        if (this._settings) {\n            description.options = Hoek.clone(this._settings);\n        }\n\n        if (this._baseType) {\n            description.base = this._baseType.describe();\n        }\n\n        if (this._description) {\n            description.description = this._description;\n        }\n\n        if (this._notes.length) {\n            description.notes = this._notes;\n        }\n\n        if (this._tags.length) {\n            description.tags = this._tags;\n        }\n\n        if (this._meta.length) {\n            description.meta = this._meta;\n        }\n\n        if (this._examples.length) {\n            description.examples = this._examples;\n        }\n\n        if (this._unit) {\n            description.unit = this._unit;\n        }\n\n        const valids = this._valids.values();\n        if (valids.length) {\n            description.valids = valids.map((v) => {\n\n                return Ref.isRef(v) ? v.toString() : v;\n            });\n        }\n\n        const invalids = this._invalids.values();\n        if (invalids.length) {\n            description.invalids = invalids.map((v) => {\n\n                return Ref.isRef(v) ? v.toString() : v;\n            });\n        }\n\n        description.rules = [];\n\n        for (let i = 0; i < this._tests.length; ++i) {\n            const validator = this._tests[i];\n            const item = { name: validator.name };\n\n            if (validator.arg !== void 0) {\n                item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;\n            }\n\n            const options = validator.options;\n            if (options) {\n                if (options.hasRef) {\n                    item.arg = {};\n                    const keys = Object.keys(validator.arg);\n                    for (let j = 0; j < keys.length; ++j) {\n                        const key = keys[j];\n                        const value = validator.arg[key];\n                        item.arg[key] = Ref.isRef(value) ? value.toString() : value;\n                    }\n                }\n\n                if (typeof options.description === 'string') {\n                    item.description = options.description;\n                }\n                else if (typeof options.description === 'function') {\n                    item.description = options.description(item.arg);\n                }\n            }\n\n            description.rules.push(item);\n        }\n\n        if (!description.rules.length) {\n            delete description.rules;\n        }\n\n        const label = this._getLabel();\n        if (label) {\n            description.label = label;\n        }\n\n        return description;\n    }\n\n    label(name) {\n\n        Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');\n\n        const obj = this.clone();\n        obj._flags.label = name;\n        return obj;\n    }\n\n    _getLabel(def) {\n\n        return this._flags.label || def;\n    }\n\n};\n\n\ninternals.Any.prototype.isImmutable = true;     // Prevents Hoek from deep cloning schema objects\n\n// Aliases\n\ninternals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;\ninternals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;\ninternals.Any.prototype.exist = internals.Any.prototype.required;\n\n\ninternals._try = function (fn, args) {\n\n    let err;\n    let result;\n\n    try {\n        result = fn.apply(null, args);\n    }\n    catch (e) {\n        err = e;\n    }\n\n    return {\n        value: result,\n        error: err\n    };\n};\n"]},"metadata":{},"sourceType":"script"}