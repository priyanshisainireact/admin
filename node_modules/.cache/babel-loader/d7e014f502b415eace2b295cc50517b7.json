{"ast":null,"code":"/**\n * Simple sanitization. It is not intended to sanitize\n * malicious element values.\n *\n * character | escaped\n *      <       &lt;\n *      >       &gt;\n *      (       &#40;\n *      )       &#41;\n *      #       &#35;\n *      &       &amp;\n *      \"       &quot;\n *      '       &apos;\n */\n// used for body text\nvar charsEscape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;'\n};\nvar charsUnescape = {\n  '&amp;': '&',\n  '&#35;': '#',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&#40;': '(',\n  '&#41;': ')',\n  '&quot;': '\"',\n  '&apos;': \"'\",\n  \"&#31;\": \"\\x1F\"\n}; // used in attribute values\n\nvar charsAttrEscape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&apos;'\n};\n\nfunction escapeRegExp(string) {\n  return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n} // sanitize body text\n\n\nexports.sanitize = function sanitize(value, reverse, attribute) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  var chars = reverse ? charsUnescape : attribute ? charsAttrEscape : charsEscape;\n  var keys = Object.keys(chars);\n  keys.forEach(function (key) {\n    value = value.replace(new RegExp(escapeRegExp(key), 'g'), chars[key]);\n  });\n  return value;\n};","map":{"version":3,"sources":["/home/cloudmynds/Desktop/admin/node_modules/xml2json/lib/sanitize.js"],"names":["charsEscape","charsUnescape","charsAttrEscape","escapeRegExp","string","replace","exports","sanitize","value","reverse","attribute","chars","keys","Object","forEach","key","RegExp"],"mappings":"AAAA;;;;;;;;;;;;;;AAcA;AACA,IAAIA,WAAW,GAAG;AACd,OAAK,OADS;AAEd,OAAK,MAFS;AAGd,OAAK;AAHS,CAAlB;AAMA,IAAIC,aAAa,GAAG;AAChB,WAAS,GADO;AAEhB,WAAS,GAFO;AAGhB,UAAQ,GAHQ;AAIhB,UAAQ,GAJQ;AAKhB,WAAS,GALO;AAMhB,WAAS,GANO;AAOhB,YAAU,GAPM;AAQhB,YAAU,GARM;AAShB,WAAS;AATO,CAApB,C,CAYA;;AACA,IAAIC,eAAe,GAAG;AAClB,OAAK,OADa;AAElB,OAAK,MAFa;AAGlB,OAAK,MAHa;AAIlB,OAAK,QAJa;AAKlB,OAAK;AALa,CAAtB;;AAQA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAOA,MAAM,CAACC,OAAP,CAAe,6BAAf,EAA8C,MAA9C,CAAP;AACH,C,CAED;;;AACAC,OAAO,CAACC,QAAR,GAAmB,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkCC,SAAlC,EAA6C;AAC5D,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOA,KAAP;AACH;;AAED,MAAIG,KAAK,GAAGF,OAAO,GAAGR,aAAH,GAAoBS,SAAS,GAAGR,eAAH,GAAqBF,WAArE;AACA,MAAIY,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,KAAZ,CAAX;AAEAC,EAAAA,IAAI,CAACE,OAAL,CAAa,UAASC,GAAT,EAAc;AACvBP,IAAAA,KAAK,GAAGA,KAAK,CAACH,OAAN,CAAc,IAAIW,MAAJ,CAAWb,YAAY,CAACY,GAAD,CAAvB,EAA8B,GAA9B,CAAd,EAAkDJ,KAAK,CAACI,GAAD,CAAvD,CAAR;AACH,GAFD;AAIA,SAAOP,KAAP;AACH,CAbD","sourcesContent":["/**\n * Simple sanitization. It is not intended to sanitize\n * malicious element values.\n *\n * character | escaped\n *      <       &lt;\n *      >       &gt;\n *      (       &#40;\n *      )       &#41;\n *      #       &#35;\n *      &       &amp;\n *      \"       &quot;\n *      '       &apos;\n */\n// used for body text\nvar charsEscape = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\n\nvar charsUnescape = {\n    '&amp;': '&',\n    '&#35;': '#',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&#40;': '(',\n    '&#41;': ')',\n    '&quot;': '\"',\n    '&apos;': \"'\",\n    \"&#31;\": \"\\u001F\"\n};\n\n// used in attribute values\nvar charsAttrEscape = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&apos;'\n};\n\nfunction escapeRegExp(string) {\n    return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n\n// sanitize body text\nexports.sanitize = function sanitize(value, reverse, attribute) {\n    if (typeof value !== 'string') {\n        return value;\n    }\n\n    var chars = reverse ? charsUnescape : (attribute ? charsAttrEscape : charsEscape);\n    var keys = Object.keys(chars);\n    \n    keys.forEach(function(key) {\n        value = value.replace(new RegExp(escapeRegExp(key), 'g'), chars[key]);\n    });\n\n    return value;\n};\n"]},"metadata":{},"sourceType":"script"}